version: '3'
services:
  mongodb:
    build:
      context: /dir/mongo/ #docker build file path
    image: mongo:latest
    networks: #network for docker-compose
      - app-network
    logging: &logging #This is the name of the logging configuration block.
      driver: "json-file" #This specifies the logging driver to use. The available drivers are json-file, syslog, and file.
      options:
        max-size: "25m" #This specifies the maximum size of each log file, in megabytes.
        max-file: "2" #This specifies the maximum number of log files to keep.
  redis:
    image: redis:7.2-rc2-alpine
    networks:
      - app-network
    logging: #This means that all of the services in the file will use the same logging configuration.
      <<: *logging
  rabbitmq:
    image: rabbitmq:3.12.0-rc.3-management-alpine
    networks:
      - app-network
    logging:
      <<: *logging
  mysql:
    build:
      context: /dir/mysql/
    image: mysql:latest
    cap_add: #This specifies the capabilities to add to the container. In this case, it adds the NET_ADMIN capability to the container. The NET_ADMIN capability allows the container to perform various network-related tasks, such as modifying network interfaces, setting up IP routing tables, and using raw sockets. 
      - NET_ADMIN
    networks:
      - app-network
    logging:
      <<: *logging
  web:
    build:
      context: web
      args:
        #any arguments to pass for setup of application. Create a .env file for passing the env variables.
        KEY: ${APP_AGENT_KEY}
    image: ${REPO}/rs-web:${TAG}
    depends_on:
      - catalogue
      - user
      - shipping
      - payment
    ports:
      - "8080:8080" #Exposing the web application port
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-H", "X-INSTANA-SYNTHETIC: 1", "-f", "http://localhost:8080/" ]
      interval: 10s
      timeout: 10s
      retries: 3 #reattempts for setup 
    logging:
      <<: *logging

networks:
  app-network:

